# .github/workflows/go.yml

name: Build and Test Go Project

on:
  push:
    branches:
      - 'main' # 当推送到 main 分支时触发
    tags:
      - 'v*'   # 当推送 v* 格式的标签时触发
  pull_request:
    branches:
      - 'main' # 当向 main 分支发起 Pull Request 时触发

jobs:
  build-test-and-release: # 将 job 名称改得更通用些
    name: Build (${{ matrix.target.os }}/${{ matrix.target.arch }}) # Job 名称现在包含平台信息
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - {os: darwin, arch: amd64, name_suffix: darwin_amd64}
          - {os: darwin, arch: arm64, name_suffix: darwin_arm64}
          - {os: linux, arch: amd64, name_suffix: linux_amd64}
          - {os: windows, arch: amd64, name_suffix: windows_amd64, ext: .exe}
        go_version: ['1.20'] # 请确保这是你项目希望使用的 Go 版本

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go_version }}

      - name: Tidy modules
        run: go mod tidy
      
      - name: Run tests
        run: go test -v ./...

      - name: Set output names and archive type
        id: set_names
        shell: bash
        run: |
          BINARY_BASE_NAME="ts-blame-reporter"
          BINARY_NAME="${BINARY_BASE_NAME}_${{ matrix.target.name_suffix }}${{ matrix.target.ext }}"
          
          if [ "${{ matrix.target.os }}" == "windows" ]; then
            ARCHIVE_NAME="${BINARY_BASE_NAME}_${{ matrix.target.name_suffix }}.zip"
          else
            ARCHIVE_NAME="${BINARY_BASE_NAME}_${{ matrix.target.name_suffix }}.tar.gz"
          fi
          
          echo "binary_name=${BINARY_NAME}" >> $GITHUB_OUTPUT
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Compile for ${{ matrix.target.os }}/${{ matrix.target.arch }}
        env:
          GOOS: ${{ matrix.target.os }}
          GOARCH: ${{ matrix.target.arch }}
        run: go build -v -o ${{ steps.set_names.outputs.binary_name }} -ldflags="-s -w" main.go

      - name: Archive binary
        shell: bash
        run: |
          if [ "${{ matrix.target.os }}" == "windows" ]; then
            zip -r ${{ steps.set_names.outputs.archive_name }} ${{ steps.set_names.outputs.binary_name }} LICENSE README.md
          else
            tar -czvf ${{ steps.set_names.outputs.archive_name }} ${{ steps.set_names.outputs.binary_name }} LICENSE README.md
          fi
          ls -l # 调试：列出生成的归档文件

      # 步骤：仅当推送到 main 分支时上传构建产物 (非正式 Release)
      - name: Upload Build Artifact (for main branch pushes)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4 # 使用最新稳定版
        with:
          name: ${{ steps.set_names.outputs.binary_name }} # 产物名称
          path: ${{ steps.set_names.outputs.archive_name }} # 要上传的归档文件路径
          retention-days: 7 # 产物保留天数 (可选)

      # 步骤：仅当推送 tag 时创建 GitHub Release
      - name: Create Release and Upload Release Asset (for tags)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1 
        with:
          files: |
            ${{ steps.set_names.outputs.archive_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
